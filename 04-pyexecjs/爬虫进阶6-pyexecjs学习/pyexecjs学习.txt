1、PyExecJS是Ruby的ExecJS移植
2、PyExecJS 用于在python中执行js脚本
3、官网：https://pypi.python.org/pypi/PyExecJS
4、PyExecJS其实是调用的windows系统的 CScript.exe 来执行的JS代码
这个exe就是用来执行脚本，一般脚本是vbscript和javascript
这个exe可以直接在cmd中通过 cscript.exe name.js

5、不管任何的第三方js执行库，最终要执行js代码，必须要有一个js引擎

6、碰到自定义的加密算法，只有2种途径处理（不考虑selenium）：
1、就是用python实，2、js调用

7、selenium属于浏览器模拟，不需要理会js等东西的处理，
但是碰上有行为分析的网站，就很可能被察觉为非人类

8、pyexecjs，在调用纯加密算法的js代码，可以提供很大的便利，
直接调用执行，不需要分析算法

9、动态内容怎么处理，就是页面加载完成后，js通过ajax方式获取的内容
答：对于封包爬虫来说，是否是ajax的，或者是url点击，或者是post提交等等，
都是没有区别的。
都是通过抓包，获取到请求（ajax的请求是post），只要抓到包，
进行模拟，获取所有提交的参数，直接获取或者加密得到
注意只要别漏包就行了。
对于封包爬虫来说，
1、能够抓取到所有的交互请求
2、能够得到所有的交互提交的参数（1是直接获取，2是加密得来）
3、不需要理会这个交互的触发方式

10、自学的能力，老师也不会碰到所有的可能出现的情况，
百度，google，查看别人的处理经验。
最重要的是大家要知道查看这个错误的原因，
有些错误从字面上就可以知道怎么处理

11、找代码错误，或者调试js的时，心态急躁的时候
1、你可以先去干会别的。。
2、听听歌，放松发送
3、找别人帮你看下代码，有时候有类似灯下黑的情况


js的处理：
1、分析js文件，在浏览器中跟踪调试，破解js加密，
使用python实现加密算法，通过封包的方式直接进行爬取想要的信息
纯代码的方式进行爬虫，不借助浏览器等工具，速度快，效率高，难度大
2、使用selenium，通过浏览器访问目标页面，模拟人机交互，
触发浏览器的跳转和交互，得到需要爬取的信息
3、pyV8，在python代码中调用js代码，不需要理解js的加密方法，
直接使用就行，也是全封包的方法进行爬取信息，
但是需要下载对应的加密算法的js文件，获取加密的函数

